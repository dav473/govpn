//go get -u google.golang.org/protobuf/cmd/protoc-gen-go && go install google.golang.org/protobuf/cmd/protoc-gen-go && go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc && go install google.golang.org/grpc/cmd/protoc-gen-go-grpc


// export PATH="$PATH:$(go env GOPATH)/bin"
// protoc --go_out=./proto --go-grpc_out=./proto ./proto/hello.proto

// npm install grpc_tools_node_protoc_ts --save-dev
// npm install @grpc/grpc-js
// protoc --plugin=protoc-gen-ts=../node_modules/.bin/protoc-gen-ts --ts_out=grpc_js:. hello.proto
syntax = "proto3";  
// generated go files in '.' current directory with 'service' package
option go_package = ".;service";


service ServerStatusService {
    rpc ServerStatus(ServerStatusRequest) returns (stream ServerStatusResponse){};
}

message ServerStatusRequest {}

message ServerStatusResponse {
    uint64 uptime = 1;
    double memory = 2;
    float disk = 3;
    float cpu = 4;
    repeated float load = 5;
    NetworkStatus network = 6;
    NetworkStatus current_network = 7;
    uint64 ping = 8;
}
message NetworkStatus{
    uint64 upload = 1;
    uint64 download = 2;
}